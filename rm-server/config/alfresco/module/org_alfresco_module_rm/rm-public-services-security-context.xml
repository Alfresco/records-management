<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE beans PUBLIC '-//SPRING//DTD BEAN//EN' 'http://www.springframework.org/dtd/spring-beans.dtd'>

<!-- ========================== -->
<!-- Enforcement of permissions -->
<!-- ========================== -->

<!--                                                                                     -->
<!-- This file defines the beans that intercept method calls to the repository services  -->
<!-- and enforce security based on the currently authenticated user.                     -->
<!--                                                                                     -->

<beans>
    
    <!-- ===================== -->
    <!-- Permissions Model DAO -->
    <!-- ===================== -->
    
    <bean id='permissionsModelDAO' class="org.alfresco.repo.security.permissions.impl.model.PermissionModel" init-method="init">
        <property name="model">
            <value>alfresco/model/permissionDefinitions.xml</value>
        </property>
        <property name="dtdSchema">
            <value>alfresco/model/permissionSchema.dtd</value>
        </property>
        <property name="nodeService">
            <ref bean="nodeService"/>
        </property>
        <property name="dictionaryService">
            <ref bean="dictionaryService"/>
        </property>
    </bean>
    
    <!-- =========================== -->
    <!-- Permissions Model Bootstrap -->
    <!-- =========================== -->
    
    <bean id="permissionModelBootstrap" class="org.alfresco.repo.security.permissions.impl.model.PermissionModelBootstrap" abstract="true" init-method="init">
        <property name="permissionModel" ref="permissionsModelDAO"/>
    </bean>
    
    <!-- =========================== -->
    <!-- Helper bean -->
    <!-- =========================== -->
    
    <bean id="RMSecurityCommon" abstract="true">
    	<property name="nodeService" ref="nodeService"/>
    	<property name="permissionService" ref="permissionService"/>
    	<property name="recordsManagementService" ref="recordsManagementService"/>
    	<property name="caveatConfigComponent" ref="caveatConfigComponent"/>
    </bean>
    
    <!-- ====== -->
    <!-- Voters -->
    <!-- ====== -->
    
    <!-- A voter to allow access based on node access control.                           -->
    <!-- These start ACL_NODE or ACL_PARENT and are followed by .methodArgumentPosition  -->
    <!-- then object type (prefix:localname) . permission                                -->
    <!--                                                                                 -->
    <!-- All permissions starting ACL_NODE and ACL_PARENT must be present for access to  -->
    <!-- be granted.                                                                     -->
    <!--                                                                                 -->
    <!-- Note: ff the context evaluates to null (e.g. doing an exists test on a node     -->
    <!-- that does not exist) then access will be allowed.                               -->
    
    <bean id="aclEntryVoter" class="org.alfresco.repo.security.permissions.impl.acegi.ACLEntryVoter" abstract="false" singleton="true" lazy-init="default" autowire="default" dependency-check="default">
        <property name="permissionService">
            <ref bean="permissionService"></ref>
        </property>
        <property name="namespacePrefixResolver">
            <ref bean="namespaceService"></ref>
        </property>
        <property name="nodeService">
            <ref bean="nodeService"></ref>
        </property>
        <property name="authenticationService">
            <ref bean="authenticationService"/>
        </property>
        <property name="authorityService">
            <ref bean="authorityService"/>
        </property>
        <property name="abstainFor">
            <set>
                <value>{http://www.alfresco.org/model/recordsmanagement/1.0}filePlanComponent</value>
            </set>
        </property>
    </bean>
    
    <bean id="rmEntryVoter" 
          class="org.alfresco.module.org_alfresco_module_rm.capability.RMEntryVoter" 
          lazy-init="false" 
          parent="RMSecurityCommon"
          depends-on="CapabilityService">
        <!-- Services -->
        <property name="namespacePrefixResolver" ref="namespaceService"/>
        <property name="dictionaryService" ref="dictionaryService"/>
        <property name="dispositionService" ref="dispositionService"/>
        <property name="capabilityService" ref="capabilityService"/>
        
    </bean>
    
    <!-- ======================= -->
    <!-- Access decision manager -->
    <!-- ======================= -->
    
    <!-- The access decision manager asks voters in order if they should allow access    -->
    <!-- Role and group access do not require ACL based access                           -->
    
    <bean id="accessDecisionManager" class="org.alfresco.repo.security.permissions.impl.acegi.AffirmativeBasedAccessDecisionManger">
        <property name="allowIfAllAbstainDecisions">
            <value>false</value>
        </property>
        <property name="decisionVoters">
            <list>
                <ref bean="roleVoter"/>
                <ref bean="groupVoter"/>
                <ref bean="aclEntryVoter"/>
                <ref bean="rmEntryVoter"/>
            </list>
        </property>
    </bean>
    
    <!-- ======================================== -->
    <!-- Post method call application of security -->
    <!-- ======================================== -->
    
    <bean id="afterAcl" class="org.alfresco.repo.security.permissions.impl.acegi.ACLEntryAfterInvocationProvider" abstract="false" singleton="true" lazy-init="default" autowire="default" dependency-check="default">
        <property name="permissionService">
            <ref bean="permissionServiceImpl"></ref>
        </property>
        <property name="namespacePrefixResolver">
            <ref bean="namespaceService"></ref>
        </property>
        <property name="nodeService">
            <ref bean="nodeService"></ref>
        </property>
        <property name="authenticationService">
            <ref bean="authenticationService"/>
        </property>
        <property name="maxPermissionCheckTimeMillis">
            <value>${system.acl.maxPermissionCheckTimeMillis}</value>
        </property>
        <property name="maxPermissionChecks">
            <value>${system.acl.maxPermissionChecks}</value>
        </property>
        <property name="unfilteredFor">
            <set>
                <value>{http://www.alfresco.org/model/recordsmanagement/1.0}filePlanComponent</value>
            </set>
        </property>
    </bean>
    
    <bean id="afterRm" class="org.alfresco.module.org_alfresco_module_rm.capability.RMAfterInvocationProvider" parent="RMSecurityCommon">
        <property name="maxPermissionCheckTimeMillis">
            <value>${system.acl.maxPermissionCheckTimeMillis}</value>
        </property>
        <property name="maxPermissionChecks">
            <value>${system.acl.maxPermissionChecks}</value>
        </property>
    </bean>
    
    <!-- Link up after method call security -->
    
    <bean id="afterInvocationManager" class="net.sf.acegisecurity.afterinvocation.AfterInvocationProviderManager">
        <property name="providers">
            <list>
                <ref bean="afterAcl"/>
                <ref bean="afterRm"/>
                <ref bean="afterAclMarking"/>
            </list>
        </property>
    </bean>
    
    <!-- ===================== -->
    <!-- The Authority Service -->
    <!-- ===================== -->
    
    <!-- This service currently has no restrictions.                                     -->
    
    <bean id="AuthorityService_security" class="org.alfresco.repo.security.permissions.impl.acegi.MethodSecurityInterceptor">
        <property name="authenticationManager">
            <ref bean="authenticationManager"/>
        </property>
        <property name="accessDecisionManager">
            <ref local="accessDecisionManager"/>
        </property>
        <property name="afterInvocationManager">
            <ref local="afterInvocationManager"/>
        </property>
        <property name="objectDefinitionSource">
            <value>
                <![CDATA[ 
                org.alfresco.service.cmr.security.AuthorityService.hasAdminAuthority=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthorityService.hasGuestAuthority=ACL_ALLOW
                org.alfresco.service.cmr.security.AuthorityService.isAdminAuthority=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthorityService.isGuestAuthority=ACL_ALLOW
                org.alfresco.service.cmr.security.AuthorityService.getAuthorities=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthorityService.getAuthoritiesForUser=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.AuthorityService.getAllAuthorities=ACL_ALLOW
                org.alfresco.service.cmr.security.AuthorityService.findAuthorities=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthorityService.getAllRootAuthorities=ACL_ALLOW
                org.alfresco.service.cmr.security.AuthorityService.createAuthority=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.AuthorityService.addAuthority=ACL_METHOD.ROLE_ADMINISTRATOR 
                org.alfresco.service.cmr.security.AuthorityService.removeAuthority=ACL_METHOD.ROLE_ADMINISTRATOR 
                org.alfresco.service.cmr.security.AuthorityService.deleteAuthority=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.AuthorityService.getContainedAuthorities=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthorityService.getContainingAuthorities=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthorityService.getContainingAuthoritiesInZone=ACL_ALLOW
                org.alfresco.service.cmr.security.AuthorityService.getShortName=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthorityService.getName=ACL_ALLOW
                org.alfresco.service.cmr.security.AuthorityService.authorityExists=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthorityService.setAuthorityDisplayName=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.AuthorityService.getAuthorityDisplayName=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthorityService.getOrCreateZone=ACL_METHOD.ROLE_ADMINISTRATOR
				org.alfresco.service.cmr.security.AuthorityService.getZone=ACL_ALLOW
				org.alfresco.service.cmr.security.AuthorityService.getAuthorityZones=ACL_ALLOW
				org.alfresco.service.cmr.security.AuthorityService.getAllAuthoritiesInZone=ACL_ALLOW
				org.alfresco.service.cmr.security.AuthorityService.getAllRootAuthoritiesInZone=ACL_ALLOW
				org.alfresco.service.cmr.security.AuthorityService.addAuthorityToZones=ACL_METHOD.ROLE_ADMINISTRATOR
				org.alfresco.service.cmr.security.AuthorityService.removeAuthorityFromZones=ACL_METHOD.ROLE_ADMINISTRATOR
				org.alfresco.service.cmr.security.AuthorityService.getDefaultZones=ACL_ALLOW
                org.alfresco.service.cmr.security.AuthorityService.*=ACL_DENY,RM_DENY 
                ]]>
            </value>
        </property>
    </bean>
    
    <!-- =============================================== -->
    <!-- The Authentication Service security interceptor -->
    <!-- =============================================== -->
    
    <!-- NOTE: Authentication is excluded as it sets or clears authentication -->
    <!-- The same for validate ticaket -->
    <!-- Update authentication checks internally -->
    <bean id="AuthenticationService_security" class="org.alfresco.repo.security.permissions.impl.acegi.MethodSecurityInterceptor">
        <property name="authenticationManager">
            <ref bean="authenticationManager"/>
        </property>
        <property name="accessDecisionManager">
            <ref local="accessDecisionManager"/>
        </property>
        <property name="afterInvocationManager">
            <ref local="afterInvocationManager"/>
        </property>
        <property name="objectDefinitionSource">
            <value>
                <![CDATA[ 
                org.alfresco.service.cmr.security.MutableAuthenticationService.isAuthenticationMutable=ACL_ALLOW
                org.alfresco.service.cmr.security.MutableAuthenticationService.isAuthenticationCreationAllowed=ACL_ALLOW
                org.alfresco.service.cmr.security.MutableAuthenticationService.createAuthentication=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.MutableAuthenticationService.updateAuthentication=ACL_ALLOW
                org.alfresco.service.cmr.security.MutableAuthenticationService.setAuthentication=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.MutableAuthenticationService.deleteAuthentication=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.MutableAuthenticationService.setAuthenticationEnabled=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.AuthenticationService.getAuthenticationEnabled=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.AuthenticationService.authenticationExists=ACL_METHOD.ROLE_ADMINISTRATOR 
                org.alfresco.service.cmr.security.AuthenticationService.getCurrentUserName=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthenticationService.invalidateUserSession=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.AuthenticationService.invalidateTicket=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthenticationService.getCurrentTicket=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthenticationService.clearCurrentSecurityContext=ACL_ALLOW
                org.alfresco.service.cmr.security.AuthenticationService.isCurrentUserTheSystemUser=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthenticationService.guestUserAuthenticationAllowed=ACL_ALLOW 
                org.alfresco.service.cmr.security.AuthenticationService.getDomains=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.AuthenticationService.getDomainsThatAllowUserCreation=ACL_METHOD.ROLE_ADMINISTRATOR 
                org.alfresco.service.cmr.security.AuthenticationService.getDomainsThatAllowUserDeletion=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.AuthenticationService.getDomiansThatAllowUserPasswordChanges=ACL_METHOD.ROLE_ADMINISTRATOR 
                ]]>
            </value>
        </property>
    </bean>
    
    <!-- =================== -->
    <!-- The Ownable Service -->
    <!-- =================== -->
    
    <!-- This service currently has no restrictions.                                     -->
    <!-- TODO: respect the permissions on the ownable service                            -->
    
    <bean id="OwnableService_security" class="org.alfresco.repo.security.permissions.impl.acegi.MethodSecurityInterceptor">
        <property name="authenticationManager">
            <ref bean="authenticationManager"/>
        </property>
        <property name="accessDecisionManager">
            <ref local="accessDecisionManager"/>
        </property>
        <property name="afterInvocationManager">
            <ref local="afterInvocationManager"/>
        </property>
        <property name="objectDefinitionSource">
            <value>
                <![CDATA[ 
                org.alfresco.service.cmr.security.OwnableService.getOwner=ACL_NODE.0.sys:base.ReadProperties,RM.Capability.0
                org.alfresco.service.cmr.security.OwnableService.setOwner=ACL_NODE.0.cm:ownable.SetOwner,RM.Capability.0
                org.alfresco.service.cmr.security.OwnableService.takeOwnership=ACL_NODE.0.cm:ownable.TakeOwnership,RM.Capability.0
                org.alfresco.service.cmr.security.OwnableService.hasOwner=ACL_NODE.0.sys:base.ReadProperties,RM.Capability.0 
                org.alfresco.service.cmr.security.OwnableService.*=ACL_DENY,RM_DENY 
            ]]>
            </value>
        </property>
    </bean>
    
    <!-- Person Service -->
    
    <bean id="PersonService_security" class="org.alfresco.repo.security.permissions.impl.acegi.MethodSecurityInterceptor">
        <property name="authenticationManager">
            <ref bean="authenticationManager"/>
        </property>
        <property name="accessDecisionManager">
            <ref local="accessDecisionManager"/>
        </property>
        <property name="afterInvocationManager">
            <ref local="afterInvocationManager"/>
        </property>
        <property name="objectDefinitionSource">
            <value>
                <![CDATA[ 
                org.alfresco.service.cmr.security.PersonService.getPerson=ACL_ALLOW,AFTER_ACL_NODE.sys:base.ReadProperties
                org.alfresco.service.cmr.security.PersonService.personExists=ACL_ALLOW
                org.alfresco.service.cmr.security.PersonService.createMissingPeople=ACL_ALLOW
                org.alfresco.service.cmr.security.PersonService.setCreateMissingPeople=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.PersonService.getMutableProperties=ACL_ALLOW
                org.alfresco.service.cmr.security.PersonService.setPersonProperties=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.PersonService.isMutable=ACL_ALLOW
                org.alfresco.service.cmr.security.PersonService.createPerson=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.PersonService.deletePerson=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.PersonService.notifyPerson=ACL_METHOD.ROLE_ADMINISTRATOR
                org.alfresco.service.cmr.security.PersonService.getAllPeople=ACL_ALLOW
                org.alfresco.service.cmr.security.PersonService.getPeople=ACL_ALLOW
                org.alfresco.service.cmr.security.PersonService.getPeopleFilteredByProperty=ACL_ALLOW
                org.alfresco.service.cmr.security.PersonService.getPeopleContainer=ACL_ALLOW
                org.alfresco.service.cmr.security.PersonService.getUserNamesAreCaseSensitive=ACL_ALLOW
                org.alfresco.service.cmr.security.PersonService.getUserIdentifier=ACL_ALLOW
                org.alfresco.service.cmr.security.PersonService.*=ACL_DENY
                ]]>
            </value>
        </property>
    </bean>       
    
    <!-- ==================== -->
    <!-- The Template Service -->
    <!-- ==================== -->
    
    <!-- This service currently has no restrictions. -->
    
    <bean id="TemplateService_security" class="org.alfresco.repo.security.permissions.impl.AlwaysProceedMethodInterceptor"/>
    
    <!-- ==================== -->
    <!-- The Script Service -->
    <!-- ==================== -->
    
    <!-- This service currently has no restrictions. -->
    
    <bean id="ScriptService_security" class="org.alfresco.repo.security.permissions.impl.AlwaysProceedMethodInterceptor"/>
    
    <!-- ================ -->
    <!-- Workflow Service -->
    <!-- ================ -->
    
    <!-- TODO: Add workflow security -->
    
    <bean id="WorkflowService_security" class="org.alfresco.repo.security.permissions.impl.AlwaysProceedMethodInterceptor"/>
    
    <!-- ============= -->
    <!-- Audit Service -->
    <!-- ============= -->
    
    <!-- TODO: Add audit security -->
    
    <bean id="AuditService_security" class="org.alfresco.repo.security.permissions.impl.AlwaysProceedMethodInterceptor"/>
    
    <!-- ======================== -->
    <!-- Repository Admin Service -->
    <!-- ======================== -->
    
    <!-- TODO: Add repository admin security -->
    
    <bean id="RepoAdminService_security" class="org.alfresco.repo.security.permissions.impl.AlwaysProceedMethodInterceptor"/>
    
    <!-- ===================== -->
    <!-- Content Usage Service -->
    <!-- ===================== -->
    
    <!-- TODO: Add content usage security -->
    <bean id="ContentUsageService_security" class="org.alfresco.repo.security.permissions.impl.AlwaysProceedMethodInterceptor"/>
    
    <bean id="PublicServiceAccessService_security" class="org.alfresco.repo.security.permissions.impl.acegi.MethodSecurityInterceptor">
        <property name="authenticationManager">
            <ref bean="authenticationManager"/>
        </property>
        <property name="accessDecisionManager">
            <ref local="accessDecisionManager"/>
        </property>
        <property name="afterInvocationManager">
            <ref local="afterInvocationManager"/>
        </property>
        <property name="objectDefinitionSource">
            <value><![CDATA[org.alfresco.service.cmr.security.PublicServiceAccessService.hasAccess=ACL_ALLOW,RM_ALLOW]]>
            </value>
        </property>
    </bean>
</beans>