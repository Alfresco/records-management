subprojects {

	apply plugin: 'java'	
	
	sourceSets {
		main {
			java {
				srcDir sourceJavaDir
			}
		}
	}

	repositories { 
		flatDir {
			dirs libsDir
		}
	}

	dependencies {		
		compile fileTree(dir: libsDir, include: '*.jar')         
	}
	
	compileJava.doFirst {
		if (areLibsUnpacked(file(libsDir)) == false) {
			tasks.unpackLibs.execute()
		}
	}
	
	task cleanLibs << {
		ant.delete {
			ant.fileset(dir: libsDir, includes: '*.jar')
		}
	}
	
	task refreshLibs (dependsOn: ['cleanLibs', 'unpackLibs'])
	
	task unpackLibs << {	
		
		if (file(warFile).exists()) {
		
			println 'Unpacking libs from ' + warFileName + ' WAR'
		
			// unpack the jars from the war file
			ant.unzip(src: warFile, dest: libsDir) {
				ant.patternset {
					ant.include(name: '**/*.jar')
				}
				ant.mapper(type: 'flatten')	
			}
		} 
		else {
		
			// TODO eventually we will be able to retrieve the war file if we don't have it
			println 'The ' + warFile + ' was not found.'
		}
	}	
	
//	task amp << {
//		
//		ant.zip(destfile: 'build/dist/blar.amp', update: 'true') {
//			
//			ant.zipfileset(file: '../module.properties')
//			ant.zipfileset(file: 'build/libs/rm.jar', prefix: 'lib')
//			ant.zipfileset(dir: '/config', prefix: 'config') {
//				ant.exclude(name: '**/module.properties')
//			}
//		}		
//	}

}
	
Boolean areLibsUnpacked(dir){
	
	result = false;
	dir.eachFileMatch(~/.*\.jar/) {
		result = true;			
	}		
	return result;
}
