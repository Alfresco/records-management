subprojects {

	apply plugin: 'java'	
	apply plugin: 'eclipse'
	
	sourceSets {
		main {
			java {
				srcDir sourceJavaDir
			}
		}
	}

	repositories { 
		flatDir {
			dirs libsDir
		}
	}

	dependencies {		     		
		compile fileTree(dir: 'war/WEB-INF/lib', include: '*.jar')     	
	}
	
	compileJava.doFirst {
		if (file('war/WEB-INF').exists() == false) {
			tasks.expandWar.execute()
		}
	}
	
	task cleanWar << {
		ant.delete {
			ant.fileset(dir: 'war', excludes: '*.war')
		}
	}
	
	task refreshWar (dependsOn: ['cleanWar', 'expandWar'])
	
	task expandWar << {	
		
		if (file(warFile).exists()) {
		
			println 'Expanding ' + warFileName + ' WAR'
			ant.unzip(src: warFile, dest: 'war') 
		} 
		else {
		
			println 'The ' + warFile + ' was not found.'
		}
	}	
	
	task amp << {}

	assemble.doLast {
		tasks.amp.execute()
	}	
}


void assembleAmp(amp, module, jar, config, web){	
	
	ant.zip(destfile: amp, update: 'true') {			
	    
		def moduleProperties = module + '/module.properties'
		def fileMapping = module + '/file-mapping.properties'
		
		if (file(moduleProperties).exists() == true) {
			ant.zipfileset(file: moduleProperties)
		}
		
		if (file(fileMapping).exists() == true) {
			ant.zipfileset(file: fileMapping)
		}
		
		if (jar != null) {
			ant.zipfileset(file: jar, prefix: 'lib')
		}
		
		if (config != null) {
			ant.zipfileset(dir: config, prefix: 'config') {
				ant.exclude(name: '**/module.properties')
				ant.exclude(name: '**/file-mapping.properties')
			}
		}
		
		if (web != null) {			
			ant.zipfileset(file: web, prefix: 'web')
		}
	}
}

